services:
  redis:
    container_name: redis
    image: 'redis/redis-stack-server:latest'
    ports:
      - '6379:6379'
  twitch-chat:
    image: twitch-chat:${COMMIT_HASH:-latest}
    container_name: twitch-chat
    restart: on-failure
    volumes:
      - ./packages/twitch/chat/locales:/app/locales
    build:
      context: twitch-chat
      target: prod
      dockerfile: ../packages/Dockerfile # Reusing same nodejs dockerfile
    hostname: twitch-chat
    ports:
      - '5005:5005'
    environment:
      - NEW_RELIC_FEATURE_FLAG_ASYNC_LOCAL_CONTEXT
      - NEW_RELIC_APP_NAME="twitch chat listener"
      - NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED
      - NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
      - NEW_RELIC_LICENSE_KEY
      - NEW_RELIC_LOG
      - NEW_RELIC_NO_CONFIG_FILE
      - TWITCH_CLIENT_ID
      - TWITCH_CLIENT_SECRET
      - TWITCH_BOT_PROVIDERID
      - DEV_CHANNELS
      - DEV_CHANNELIDS
      - NODE_ENV
      - DATABASE_URL
      - MONGO_URL
      - DB_URL
      - DB_SECRET
  twitch-events:
    image: twitch-events:${COMMIT_HASH:-latest}
    container_name: twitch-events
    restart: on-failure
    build:
      context: twitch-events
      target: prod
      dockerfile: ../packages/Dockerfile # Reusing same nodejs dockerfile
    hostname: twitch-events
    ports:
      - '82:5010'
      - '5015:5015'
    environment:
      - NEW_RELIC_FEATURE_FLAG_ASYNC_LOCAL_CONTEXT
      - NEW_RELIC_APP_NAME="twitch eventsub listener"
      - NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED
      - NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
      - NEW_RELIC_LICENSE_KEY
      - NEW_RELIC_LOG
      - NEW_RELIC_NO_CONFIG_FILE
      - PORT=5010
      - DATABASE_URL
      - MONGO_URL
      - TWITCH_CLIENT_ID
      - TWITCH_CLIENT_SECRET
      - DEV_CHANNELS
      - DEV_CHANNELIDS
      - NODE_ENV
      - DB_URL
      - DB_SECRET
      - EVENTSUB_HOST
      - TWITCH_EVENTSUB_SECRET
  dota:
    image: dota:${COMMIT_HASH:-latest}
    container_name: dota
    restart: on-failure
    build:
      context: dota
      target: prod
    volumes:
      - steam_auth:/app/src/steam/volumes
      - ./packages/dota/locales:/app/locales
    hostname: dota
    ports:
      - '81:5000'
      - '9229:9229'
    environment:
      - COMMIT_HASH
      - NEW_RELIC_ENABLED
      - NR_NATIVE_METRICS_NO_BUILD
      - NEW_RELIC_FEATURE_FLAG_ASYNC_LOCAL_CONTEXT
      - NEW_RELIC_APP_NAME="dotabod dota"
      - NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED
      - NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
      - NEW_RELIC_LICENSE_KEY
      - NEW_RELIC_LOG
      - NEW_RELIC_NO_CONFIG_FILE
      - ADMIN_CHANNELS
      - DATABASE_URL
      - DB_SECRET
      - DB_URL
      - MONGO_URL
      - DEV_CHANNELS
      - DEV_CHANNELIDS
      - NODE_ENV
      - STEAM_PASS
      - STEAM_USER
      - STEAM_WEB_API
      - TWITCH_BOT_PROVIDERID
      - TWITCH_CLIENT_ID
      - TWITCH_CLIENT_SECRET
  nginx:
    container_name: nginx
    image: nginx
    restart: on-failure
    volumes:
    - ./nginx/default.conf:/etc/nginx/templates/default.conf.template
    build: ./nginx
    ports:
      - '80:80'
      - '443:443'
    environment:
      - NGINX_HOST
      - EVENTSUB_HOST
      - TLS_CERT
      - TLS_KEY
  mongodb:
    container_name: mongodb
    image: "mongo"
    ports:
      - "27017:27017"
    volumes:
      - "mongodb_data:/data/db"
      - ./mongodb/init.sh:/docker-entrypoint-initdb.d/init_mongo.js

# Volumes are useful for data persistence, so the data will not be deleted
# even later you call command docker-compose down.
volumes:
  steam_auth:
  mongodb_data:
